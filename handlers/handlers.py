from aiogram.filters import Command
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards.keyboards import (
    kb,
    create_answer_keyboard,
    create_explain_keyboard,
)
import random
from Config.config import questions


router = Router()


@router.message(Command("start"))
async def start_command_handler(message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø ‚Äî –±–æ—Ç —Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–π –ø–æ –∏—Å—Ç–æ—Ä–∏–∏.\n"
        "–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, —É–∑–Ω–∞–π –Ω–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏ –ø–æ–ª—É—á–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∏–≥—Ä—ã!"
        "\n\n"
        "–ì–æ—Ç–æ–≤? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω—ë–º!", reply_markup=kb
    )


@router.message(Command("help"))
async def help_command_handler(message):
    await message.answer(
        "‚ÑπÔ∏è –≠—Ç–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞.\n"
        "–¢–µ–±–µ –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã —Å —á–µ—Ç—ã—Ä—å–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–í—ã–±–∏—Ä–∞–π, –∏ —è —Å—Ä–∞–∑—É —Å–∫–∞–∂—É, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª, "
        "–∏ —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
        "–£–¥–∞—á–∏!üôÇ"
    )


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button_handler(message: Message):
    await help_command_handler(message)


@router.message(F.text == "‚ñ∂Ô∏è –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
async def new_question_button_handler(message: Message):
    question = random.choice(questions)
    await message.answer(question['question'],
                         reply_markup=create_answer_keyboard(
                             question['answers']))


@router.callback_query(
    F.data[:-2] == "answer"
)
async def answer_callback_handler(callback_query: CallbackQuery):
    answer_id = int(callback_query.data[-1])
    question = next(
        (
            q for q in questions
            if callback_query.message.text == q["question"]
        ),
        None
    )

    if question:
        correct_answer = question['answer']
        if question["answers"][answer_id] == correct_answer:
            result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ"
        else:
            result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

        await callback_query.message.answer(
            result_text,
            reply_markup=create_explain_keyboard(
                question['explanation_offer']
            )
        )
        await callback_query.answer()
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(F.data == "explain")
async def explain_callback_handler(callback_query: CallbackQuery):
    question = next(
        (
            q for q in questions if q['explanation_offer'] in
            callback_query.message.reply_markup.inline_keyboard[0][0].text
        ),
        None
    )

    if question:
        await callback_query.message.answer(question['explanation'])
        await callback_query.answer()
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@router.message()
async def unknown_command(message: Message):
    await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
